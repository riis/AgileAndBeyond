//
//  sessionsViewController.m
//  AgileAndBeyond
//
//  Created by Derek VerLee on 1/27/11.
//  Copyright 2011 RIIS LLC. All rights reserved.
//

#import "mainFilterSelectionMenu.h"
#import "sessionListViewController.h"
#import "AgileAndBeyondAppGlobals.h"
#import "session.h"

@implementation mainFilterSelectionMenu 

// functions for "building" the table view
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView 
{
  return 4;      
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section 
{
  switch (section) {
  case 0 : return 1 ; // All 
  case 1 : return 2 ; // by type
  case 2 : return 3 ; // By Difficulty 
  case 3 : return 5 ; // by Track
  default: return 0 ; 
    // TODO error/assert andor do something consistant for "code should not be reached
  }
}

-(NSString*)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section 
{

  // We'll just hard code the section titles, otherwise it ends up being in memory twice,
  // plus any data structures.
  switch (section) {
  case 0 : return @"All"; 
  case 1 : return @"By Type";
  case 2 : return @"By Difficulty"; 
  case 3 : return @"By Track";
  default: return @"";	
    // TODO unreachable code error? 
  }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath 
{
  
  static NSString *CellIdentifier = @"Cell";

  // we use the variable "cell" to hold the tablecell object to operate on
  // first, the dequeueReusable.. call sees if the cell already exists

  // TODO, bring back the cell recycling (something was broken, so I commented it out)
  UITableViewCell *cell ;//= [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
	
  // if cell isn't nil, we've just fetched it from cache so don't recreate	
  // if (cell != nil) return cell;  // just abort here, we're recycling the cell
	
  // This varient of the line generated by xcode appears in O'Rielly book,p224
  cell = [[[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:CellIdentifier] autorelease];	
	
  switch ([indexPath indexAtPosition:0]) // switch for which section
    {
    case 0 :  //                                        __==  section ALL 
      switch ([indexPath indexAtPosition:1]) 
	{ // switch by position within section 0 ("All")
	case 0 :
	  cell.textLabel.text = @"All"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;
	  break;	
	}
      break;
    case 1 :  //                                         __==  section By Type
      switch ([indexPath indexAtPosition:1]) 
	{
	case 0 : 
	  cell.textLabel.text = @"Breakout Presentations"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	case 1 : 
	  cell.textLabel.text = @"Workshops"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	}
      break;			
    case 2 : //                                         __==  section By Difficulty
      switch ([indexPath indexAtPosition:1]) 
	{
	case 0 : 
	  cell.textLabel.text = @"Beginner"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	case 1 : 
	  cell.textLabel.text = @"Intermediate"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	case 2 : 
	  cell.textLabel.text = @"Advanced"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;				
	}
      break;			
    case 3 :  //                                         __==  section By Track
      switch ([indexPath indexAtPosition:1]) 
	{
	case 0 : 
	  cell.textLabel.text = @"Hands-On Technology Track"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	case 1 : 
	  cell.textLabel.text = @"Interactive Process Track"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	case 2 : 
	  cell.textLabel.text = @"Usability Experience Track"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	case 3 : 
	  cell.textLabel.text = @"Leadership Track"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	case 4 : 
	  cell.textLabel.text = @"Open Space Track"; 
	  cell.accessoryType=UITableViewCellAccessoryDisclosureIndicator;	
	  break;
	}
      break;
    }
	
  return cell;
}


- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath 
{
  sessionListViewController* filteredListView;
  NSString* newViewTitle;
  // TODO (cleanup) less repeated code
  NSPredicate* myPredicate;
  
  // TODO don't do this each time, move this code
  tableViewSection* newSection;
  NSMutableArray* sectionDates = [[NSMutableArray alloc] init];
  NSMutableArray* viewSections = [[NSMutableArray alloc] init];  

   switch ([indexPath indexAtPosition:0]) // switch for which section
    {
    case 0 :  //                                         __==  section ALL
      switch ([indexPath indexAtPosition:1]) { // switch by position within section 0 ("All")
      case 0 :  // ----====   ALL  SESSIONS   ===---
	// TODO : don't create a new listview each time
	myPredicate= [NSPredicate predicateWithValue:TRUE];  
	newViewTitle = @"All Sessions";
	[sectionDates addObjectsFromArray:
			[NSArray arrayWithObjects:
				   AAB_WELCOMEINTRO_DATE, AAB_OPENINGKEYNOTE_DATE, 
				 AAB_FIRST_SLOT_DATE, AAB_LUNCH_DATE, AAB_SECOND_SLOT_DATE,
				 AAB_CLOSINGKEYNOTE_DATE,AAB_CLOSINGSUMMARY_DATE,nil]];
	break;				
      }
      break;			 
    case 1: //                                         __==  section By Type
	[sectionDates addObjectsFromArray:
			[NSArray arrayWithObjects:AAB_FIRST_SLOT_DATE,AAB_SECOND_SLOT_DATE,nil]];
      switch ([indexPath indexAtPosition:1]) 
	{
	case 0 : // ----==== Breakout Presenentations SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"timeStart == %@", AAB_FIRST_SLOT_DATE];
	  newViewTitle = @"Breakout Presentations";
	  break;
	case 1 : // ----==== Breakout Presenentations SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"timeStart == %@", AAB_SECOND_SLOT_DATE];
	  newViewTitle = @"Workshops";
	  break;
	}
      break;
    case 2 : //                                         __==  section By Difficulty
      [sectionDates addObjectsFromArray:
		      [NSArray arrayWithObjects:AAB_FIRST_SLOT_DATE,AAB_SECOND_SLOT_DATE,nil]];
      switch ([indexPath indexAtPosition:1]) 
	{
	case 0 : // ----==== BEGINER DIFFICULTY SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"isBeginner == YES"];  
	  newViewTitle = @"Beginner Sessions";
	  break;
	case 1 :  // ----==== INTERMEDIATE DIFFICULTY SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"isIntermediate == YES"];  
	  newViewTitle = @"Intermediate Sessions";
	  break;
	case 2 :  // ----==== ADVANCED DIFFICULTY SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"isAdvanced == YES"];  
	  newViewTitle = @"Advanced Sessions";
	  break;					
	}
      break;      // section By Trac
    case 3 ://                                         __==  section By  Track  
      switch ([indexPath indexAtPosition:1]) 
	{
	case 0 :  // ----==== HANDS-ON TECHNOLOGY TRACK SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"track like 'Hands-On Technology'"];  
	  newViewTitle = @"Hands-On Technology Track";
	  [sectionDates addObjectsFromArray:
			  [NSArray arrayWithObjects:AAB_FIRST_SLOT_DATE,AAB_SECOND_SLOT_DATE,nil]];
	  break;
	case 1 : // ----==== INTERACTIVE PROCESS TRACK SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"track like 'Interactive Process'"];  
	  newViewTitle = @"Interactive Process Track";
	  [sectionDates addObjectsFromArray:
			[NSArray arrayWithObjects:AAB_FIRST_SLOT_DATE,AAB_SECOND_SLOT_DATE,nil]];
	  break;
	case 2 : // ----==== USABILITY EXPERIENCE TRACK SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"track like 'Usability Experience'"];  
	  newViewTitle = @"Usability Experience Track"; 
	  [sectionDates addObjectsFromArray:
			[NSArray arrayWithObjects:AAB_FIRST_SLOT_DATE,AAB_SECOND_SLOT_DATE,nil]];
	  break;
	case 3 :  // ----==== LEADERSHIP TRACK SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"track like 'Leadership'"];  
	  newViewTitle = @"Leadership Track";
	  [sectionDates addObjectsFromArray:
			[NSArray arrayWithObjects:AAB_FIRST_SLOT_DATE,AAB_SECOND_SLOT_DATE,nil]];
	  break;
	case 4 :  // ----==== OPEN SPACE TRACK SESSIONS ===---
	  myPredicate=[NSPredicate predicateWithFormat:@"track like 'Open Space'"];  
	  newViewTitle = @"Open Space Track";
	  [sectionDates addObjectsFromArray:
			  [NSArray arrayWithObjects:
				     AAB_FIRST_SLOT_DATE, AAB_LUNCH_DATE, AAB_SECOND_SLOT_DATE,nil]];
	  break;
	}
      break;
    }

   for ( NSDate* thisTime in sectionDates )
     {
        newSection = [[tableViewSection alloc] init];
	newSection.title = [AABDateSectionTitleFormmater stringFromDate:thisTime];
	newSection.predicate=[NSPredicate predicateWithFormat:@"timeStart == %@", thisTime];
	[viewSections addObject:newSection];
	[newSection release];
     }
   
   filteredListView = [sessionListViewController 
			createUsingArray: [AABSessions allValues]
			groupList:viewSections
			filterBy:myPredicate];
   filteredListView.title = newViewTitle;
   
   [self.navigationController pushViewController:filteredListView animated:YES];
   
   [sectionDates release];  [viewSections release];
}	
@end
